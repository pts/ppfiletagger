README for rmtimeup
"""""""""""""""""""
rmtimeup is a Linux i386 (x86) 32-bit kernel module which updates the
mtime of all ancestor directories for all interesting file operations:
rename, unlink, link, setxattr on files. To do this, it registers itself
as a security handler (LSM -- Linux security module). rmtimeup can be used
as a component of a local filesystem indexing framework (similar to Beagle,
rlocate and movemetafs).

TODO: write this README

System requirements
~~~~~~~~~~~~~~~~~~~
rmtimeup needs:

* A Linux system running kernel 2.6 on i386 (x86) 32-bit architecture.
  Other architectures, including 64-bit (x86-64, amd64, ia64) are not
  supported. uname -a should print Linux, 2.6.*, i[3456]86, but not x86_64.
* Kernel loadable module support (LKM, CONFIG_MODULES=y).
* Security modules support (CONFIG_SECURITY=y). Most distribution stock kernels
  nowadays (such as Etch, Hardy) have this.
* No other active security modules, i.e. no capability, selinux, apparmor or
  grsecurity. See section `What to do if the kernel module cannot be loaded'
  about disabling those. Please note that rmtimeup doesn't support security
  module stacking when rmtimeup is loaded first. If your security subsystem
  supports stacking (capability doesn't), rmtimeup won't work either. If you
  really need that, it may be possible with some custom software
  development and a kernel patch.

What could be done with a kernel patch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It would be possible to prepare a kernel patch, which would relax the
system requirements:

* Any architecture instead of 32-bit i386.
* Cooperation with other security modules using security module stacking in
  either direction.
* No disassembler.

Please contact me if you really need that kernel patch (I haven't written it
yet).

How to compile and load
~~~~~~~~~~~~~~~~~~~~~~~
To compile and load rmtimeup, run these commands:

  $ ls -l rmtimeup.txt mainmod.c ud.c
  $ make
  $ sudo insmod ./rmtimeup.ko 

If `make' gives you error messages like

  warning: initialization from incomatible pointer type

(such as with the Ubuntu Hardy 2.6.24-22-generic kernel), try this:

  $ USE_EXTRA_VFSMNT=1 make

TODO: describe hooks, remove documentation references about security

TODO: how to install permanently

What to do if the kernel module cannot be loaded
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you cannot load rmtimeup.ko because you get `rmtimeup: Another security
module is active.' in the kernel log (dmesg, /var/log/syslog), the reason
might be that another security handler is active (most probably one of
capability, selinux or apparmor). To disable a security handler, you must
unload it (with rmmod), or disable it using a Linux boot flag (in GRUB or
LILO, see also /proc/cmdline).

Here are some good and bad entries from a kernel boot log (dmesg):

* good: Security Framework v1.0.0 initialized
  good: Security Scaffold v1.0.0 initialized
* good (flag selinux=0): SELinux:  Disabled at boot.
  bad: SELinux:  Initializing.
* good (flag capability.disable=1): Capabilities disabled at initialization
  bad: Capability LSM initialized
* bad (as in Ubuntu Hardy 8.04.1): AppArmor: AppArmor initialized

Copyright
~~~~~~~~~
rmtimeup is written and copyright by Peter Szabo <pts@fazekas.hu> from January
2009.

rmtimeup is free software under the GNU GPL v2.

Acknowledgements
~~~~~~~~~~~~~~~~
Part of the code of rmtimeup is based on rfsdelta 0.08 by Peter Szabo, which
is based on rlocate.c (of rlocate 0.5.5) by Rasto Levrinc, which takes some
code from Peter Robinson (http://www.logic.at/staff/robinson/).

rfsdelta contains valuable improvements from Andress Blomdell.

rmtimeup contains a modified copy of udis86 1.7, 
